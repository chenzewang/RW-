!function(e){var n={};function t(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:r})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var o in e)t.d(r,o,function(n){return e[n]}.bind(null,o));return r},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=1)}([function(e,n,t){(function(n){var t;e.exports=function e(n,r,o){function i(u,a){if(!r[u]){if(!n[u]){var c="function"==typeof t&&t;if(!a&&c)return t(u,!0);if(s)return s(u,!0);var v=new Error("Cannot find module '"+u+"'");throw v.code="MODULE_NOT_FOUND",v}var f=r[u]={exports:{}};n[u][0].call(f.exports,function(e){var t=n[u][1][e];return i(t||e)},f,f.exports,e,n,r,o)}return r[u].exports}for(var s="function"==typeof t&&t,u=0;u<o.length;u++)i(o[u]);return i}({1:[function(e,n,t){var r=e("./vdom/create-element.js");n.exports=r},{"./vdom/create-element.js":15}],2:[function(e,n,t){var r=e("./vtree/diff.js");n.exports=r},{"./vtree/diff.js":35}],3:[function(e,n,t){var r=e("./virtual-hyperscript/index.js");n.exports=r},{"./virtual-hyperscript/index.js":22}],4:[function(e,n,t){var r=e("./diff.js"),o=e("./patch.js"),i=e("./h.js"),s=e("./create-element.js"),u=e("./vnode/vnode.js"),a=e("./vnode/vtext.js");n.exports={diff:r,patch:o,h:i,create:s,VNode:u,VText:a}},{"./create-element.js":1,"./diff.js":2,"./h.js":3,"./patch.js":13,"./vnode/vnode.js":31,"./vnode/vtext.js":33}],5:[function(e,n,t){var r,o,i;
/*!
 * Cross-Browser Split 1.1.1
 * Copyright 2007-2012 Steven Levithan <stevenlevithan.com>
 * Available under the MIT License
 * ECMAScript compliant, uniform cross-browser split method
 */
n.exports=(o=String.prototype.split,i=/()??/.exec("")[1]===r,function(e,n,t){if("[object RegExp]"!==Object.prototype.toString.call(n))return o.call(e,n,t);var s,u,a,c,v=[],f=(n.ignoreCase?"i":"")+(n.multiline?"m":"")+(n.extended?"x":"")+(n.sticky?"y":""),d=0,n=new RegExp(n.source,f+"g");for(e+="",i||(s=new RegExp("^"+n.source+"$(?!\\s)",f)),t=t===r?-1>>>0:t>>>0;(u=n.exec(e))&&!((a=u.index+u[0].length)>d&&(v.push(e.slice(d,u.index)),!i&&u.length>1&&u[0].replace(s,function(){for(var e=1;e<arguments.length-2;e++)arguments[e]===r&&(u[e]=r)}),u.length>1&&u.index<e.length&&Array.prototype.push.apply(v,u.slice(1)),c=u[0].length,d=a,v.length>=t));)n.lastIndex===u.index&&n.lastIndex++;return d===e.length?!c&&n.test("")||v.push(""):v.push(e.slice(d)),v.length>t?v.slice(0,t):v})},{}],6:[function(e,n,t){},{}],7:[function(e,n,t){"use strict";var r=e("individual/one-version");r("ev-store","7");var o="__EV_STORE_KEY@7";n.exports=function(e){var n=e[o];return n||(n=e[o]={}),n}},{"individual/one-version":9}],8:[function(e,t,r){(function(e){"use strict";var n="undefined"!=typeof window?window:void 0!==e?e:{};t.exports=function(e,t){return e in n?n[e]:(n[e]=t,t)}}).call(this,void 0!==n?n:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],9:[function(e,n,t){"use strict";var r=e("./index.js");n.exports=function(e,n,t){var o="__INDIVIDUAL_ONE_VERSION_"+e,i=r(o+"_ENFORCE_SINGLETON",n);if(i!==n)throw new Error("Can only have one copy of "+e+".\nYou already have version "+i+" installed.\nThis means you cannot install version "+n);return r(o,t)}},{"./index.js":8}],10:[function(e,t,r){(function(n){var r=void 0!==n?n:"undefined"!=typeof window?window:{},o=e("min-document");if("undefined"!=typeof document)t.exports=document;else{var i=r["__GLOBAL_DOCUMENT_CACHE@4"];i||(i=r["__GLOBAL_DOCUMENT_CACHE@4"]=o),t.exports=i}}).call(this,void 0!==n?n:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"min-document":6}],11:[function(e,n,t){"use strict";n.exports=function(e){return"object"==typeof e&&null!==e}},{}],12:[function(e,n,t){var r=Array.isArray,o=Object.prototype.toString;n.exports=r||function(e){return"[object Array]"===o.call(e)}},{}],13:[function(e,n,t){var r=e("./vdom/patch.js");n.exports=r},{"./vdom/patch.js":18}],14:[function(e,n,t){var r=e("is-object"),o=e("../vnode/is-vhook.js");function i(e,n,t,r){if(r){var i=r[n];if(o(i))i.unhook&&i.unhook(e,n,t);else if("attributes"===n)for(var s in i)e.removeAttribute(s);else if("style"===n)for(var u in i)e.style[u]="";else e[n]="string"==typeof i?"":null}}function s(e,n,t,o,i){var s=t?t[o]:void 0;if("attributes"!==o)if(s&&r(s)&&u(s)!==u(i))e[o]=i;else{r(e[o])||(e[o]={});var a="style"===o?"":void 0;for(var c in i){var v=i[c];e[o][c]=void 0===v?a:v}}else for(var f in i){var d=i[f];void 0===d?e.removeAttribute(f):e.setAttribute(f,d)}}function u(e){return Object.getPrototypeOf?Object.getPrototypeOf(e):e.__proto__?e.__proto__:e.constructor?e.constructor.prototype:void 0}n.exports=function(e,n,t){for(var u in n){var a=n[u];void 0===a?i(e,u,a,t):o(a)?(i(e,u,a,t),a.hook&&a.hook(e,u,t?t[u]:void 0)):r(a)?s(e,0,t,u,a):e[u]=a}}},{"../vnode/is-vhook.js":26,"is-object":11}],15:[function(e,n,t){var r=e("global/document"),o=e("./apply-properties"),i=e("../vnode/is-vnode.js"),s=e("../vnode/is-vtext.js"),u=e("../vnode/is-widget.js"),a=e("../vnode/handle-thunk.js");n.exports=function e(n,t){var c=t&&t.document||r,v=t?t.warn:null;if(n=a(n).a,u(n))return n.init();if(s(n))return c.createTextNode(n.text);if(!i(n))return v&&v("Item is not a valid virtual dom node",n),null;var f=null===n.namespace?c.createElement(n.tagName):c.createElementNS(n.namespace,n.tagName),d=n.properties;o(f,d);for(var l=n.children,p=0;p<l.length;p++){var h=e(l[p],t);h&&f.appendChild(h)}return f}},{"../vnode/handle-thunk.js":24,"../vnode/is-vnode.js":27,"../vnode/is-vtext.js":28,"../vnode/is-widget.js":29,"./apply-properties":14,"global/document":10}],16:[function(e,n,t){var r={};function o(e,n,t){if(0===e.length)return!1;for(var r,o,i=0,s=e.length-1;i<=s;){if(o=e[r=(s+i)/2>>0],i===s)return o>=n&&o<=t;if(o<n)i=r+1;else{if(!(o>t))return!0;s=r-1}}return!1}function i(e,n){return e>n?1:-1}n.exports=function(e,n,t,s){return t&&0!==t.length?(t.sort(i),function e(n,t,i,s,u){if(s=s||{},n){o(i,u,u)&&(s[u]=n);var a=t.children;if(a)for(var c=n.childNodes,v=0;v<t.children.length;v++){u+=1;var f=a[v]||r,d=u+(f.count||0);o(i,u,d)&&e(c[v],f,i,s,u),u=d}}return s}(e,n,t,s,0)):{}}},{}],17:[function(e,n,t){var r=e("./apply-properties"),o=e("../vnode/is-widget.js"),i=e("../vnode/vpatch.js"),s=e("./update-widget");function u(e,n){"function"==typeof n.destroy&&o(n)&&n.destroy(e)}n.exports=function(e,n,t){var o,a,c=e.type,v=e.vNode,f=e.patch;switch(c){case i.REMOVE:return function(e,n){var t=e.parentNode;return t&&t.removeChild(e),u(e,n),null}(n,v);case i.INSERT:return function(e,n,t){var r=t.render(n,t);return e&&e.appendChild(r),e}(n,f,t);case i.VTEXT:return function(e,n,t,r){var o;if(3===e.nodeType)e.replaceData(0,e.length,t.text),o=e;else{var i=e.parentNode;o=r.render(t,r),i&&o!==e&&i.replaceChild(o,e)}return o}(n,0,f,t);case i.WIDGET:return function(e,n,t,r){var o,i=s(n,t);o=i?t.update(n,e)||e:r.render(t,r);var a=e.parentNode;return a&&o!==e&&a.replaceChild(o,e),i||u(e,n),o}(n,v,f,t);case i.VNODE:return function(e,n,t,r){var o=e.parentNode,i=r.render(t,r);return o&&i!==e&&o.replaceChild(i,e),i}(n,0,f,t);case i.ORDER:return function(e,n){for(var t,r,o,i=e.childNodes,s={},u=0;u<n.removes.length;u++)r=n.removes[u],t=i[r.from],r.key&&(s[r.key]=t),e.removeChild(t);for(var a=i.length,c=0;c<n.inserts.length;c++)o=n.inserts[c],t=s[o.key],e.insertBefore(t,o.to>=a++?null:i[o.to])}(n,f),n;case i.PROPS:return r(n,f,v.properties),n;case i.THUNK:return o=n,a=t.patch(n,f,t),o&&a&&o!==a&&o.parentNode&&o.parentNode.replaceChild(a,o),a;default:return n}}},{"../vnode/is-widget.js":29,"../vnode/vpatch.js":32,"./apply-properties":14,"./update-widget":19}],18:[function(e,n,t){var r=e("global/document"),o=e("x-is-array"),i=e("./create-element"),s=e("./dom-index"),u=e("./patch-op");function a(e,n,t){var o=function(e){var n=[];for(var t in e)"a"!==t&&n.push(Number(t));return n}(n);if(0===o.length)return e;var i=s(e,n.a,o),u=e.ownerDocument;t.document||u===r||(t.document=u);for(var a=0;a<o.length;a++){var v=o[a];e=c(e,i[v],n[v],t)}return e}function c(e,n,t,r){if(!n)return e;var i;if(o(t))for(var s=0;s<t.length;s++)i=u(t[s],n,r),n===e&&(e=i);else i=u(t,n,r),n===e&&(e=i);return e}n.exports=function e(n,t,r){return(r=r||{}).patch=r.patch&&r.patch!==e?r.patch:a,r.render=r.render||i,r.patch(n,t,r)}},{"./create-element":15,"./dom-index":16,"./patch-op":17,"global/document":10,"x-is-array":12}],19:[function(e,n,t){var r=e("../vnode/is-widget.js");n.exports=function(e,n){return!(!r(e)||!r(n))&&("name"in e&&"name"in n?e.id===n.id:e.init===n.init)}},{"../vnode/is-widget.js":29}],20:[function(e,n,t){"use strict";var r=e("ev-store");function o(e){if(!(this instanceof o))return new o(e);this.value=e}n.exports=o,o.prototype.hook=function(e,n){var t=r(e),o=n.substr(3);t[o]=this.value},o.prototype.unhook=function(e,n){var t=r(e),o=n.substr(3);t[o]=void 0}},{"ev-store":7}],21:[function(e,n,t){"use strict";function r(e){if(!(this instanceof r))return new r(e);this.value=e}n.exports=r,r.prototype.hook=function(e,n){e[n]!==this.value&&(e[n]=this.value)}},{}],22:[function(e,n,t){"use strict";var r=e("x-is-array"),o=e("../vnode/vnode.js"),i=e("../vnode/vtext.js"),s=e("../vnode/is-vnode"),u=e("../vnode/is-vtext"),a=e("../vnode/is-widget"),c=e("../vnode/is-vhook"),v=e("../vnode/is-thunk"),f=e("./parse-tag.js"),d=e("./hooks/soft-set-hook.js"),l=e("./hooks/ev-hook.js");function p(e){return s(e)||u(e)||a(e)||v(e)}function h(e){try{return JSON.stringify(e,null,"    ")}catch(n){return String(e)}}n.exports=function(e,n,t){var s,u,a,v,y,g=[];return!t&&("string"==typeof(y=n)||r(y)||p(y))&&(t=n,u={}),s=f(e,u=u||n||{}),u.hasOwnProperty("key")&&(a=u.key,u.key=void 0),u.hasOwnProperty("namespace")&&(v=u.namespace,u.namespace=void 0),"INPUT"!==s||v||!u.hasOwnProperty("value")||void 0===u.value||c(u.value)||(u.value=d(u.value)),function(e){for(var n in e)if(e.hasOwnProperty(n)){var t=e[n];if(c(t))continue;"ev-"===n.substr(0,3)&&(e[n]=l(t))}}(u),null!=t&&function e(n,t,o,s){if("string"==typeof n)t.push(new i(n));else if("number"==typeof n)t.push(new i(String(n)));else if(p(n))t.push(n);else{if(!r(n)){if(null==n)return;throw a={foreignObject:n,parentVnode:{tagName:o,properties:s}},(c=new Error).type="virtual-hyperscript.unexpected.virtual-element",c.message="Unexpected virtual child passed to h().\nExpected a VNode / Vthunk / VWidget / string but:\ngot:\n"+h(a.foreignObject)+".\nThe parent vnode is:\n"+h(a.parentVnode),c.foreignObject=a.foreignObject,c.parentVnode=a.parentVnode,c}for(var u=0;u<n.length;u++)e(n[u],t,o,s)}var a,c}(t,g,s,u),new o(s,u,g,a,v)}},{"../vnode/is-thunk":25,"../vnode/is-vhook":26,"../vnode/is-vnode":27,"../vnode/is-vtext":28,"../vnode/is-widget":29,"../vnode/vnode.js":31,"../vnode/vtext.js":33,"./hooks/ev-hook.js":20,"./hooks/soft-set-hook.js":21,"./parse-tag.js":23,"x-is-array":12}],23:[function(e,n,t){"use strict";var r=e("browser-split"),o=/([\.#]?[a-zA-Z0-9\u007F-\uFFFF_:-]+)/,i=/^\.|#/;n.exports=function(e,n){if(!e)return"DIV";var t,s,u,a,c=!n.hasOwnProperty("id"),v=r(e,o),f=null;for(i.test(v[1])&&(f="DIV"),a=0;a<v.length;a++)(s=v[a])&&(u=s.charAt(0),f?"."===u?(t=t||[]).push(s.substring(1,s.length)):"#"===u&&c&&(n.id=s.substring(1,s.length)):f=s);return t&&(n.className&&t.push(n.className),n.className=t.join(" ")),n.namespace?f:f.toUpperCase()}},{"browser-split":5}],24:[function(e,n,t){var r=e("./is-vnode"),o=e("./is-vtext"),i=e("./is-widget"),s=e("./is-thunk");function u(e,n){var t=e.vnode;if(t||(t=e.vnode=e.render(n)),!(r(t)||o(t)||i(t)))throw new Error("thunk did not return a valid node");return t}n.exports=function(e,n){var t=e,r=n;return s(n)&&(r=u(n,e)),s(e)&&(t=u(e,null)),{a:t,b:r}}},{"./is-thunk":25,"./is-vnode":27,"./is-vtext":28,"./is-widget":29}],25:[function(e,n,t){n.exports=function(e){return e&&"Thunk"===e.type}},{}],26:[function(e,n,t){n.exports=function(e){return e&&("function"==typeof e.hook&&!e.hasOwnProperty("hook")||"function"==typeof e.unhook&&!e.hasOwnProperty("unhook"))}},{}],27:[function(e,n,t){var r=e("./version");n.exports=function(e){return e&&"VirtualNode"===e.type&&e.version===r}},{"./version":30}],28:[function(e,n,t){var r=e("./version");n.exports=function(e){return e&&"VirtualText"===e.type&&e.version===r}},{"./version":30}],29:[function(e,n,t){n.exports=function(e){return e&&"Widget"===e.type}},{}],30:[function(e,n,t){n.exports="2"},{}],31:[function(e,n,t){var r=e("./version"),o=e("./is-vnode"),i=e("./is-widget"),s=e("./is-thunk"),u=e("./is-vhook");n.exports=v;var a={},c=[];function v(e,n,t,r,v){this.tagName=e,this.properties=n||a,this.children=t||c,this.key=null!=r?String(r):void 0,this.namespace="string"==typeof v?v:null;var f,d=t&&t.length||0,l=0,p=!1,h=!1,y=!1;for(var g in n)if(n.hasOwnProperty(g)){var x=n[g];u(x)&&x.unhook&&(f||(f={}),f[g]=x)}for(var k=0;k<d;k++){var w=t[k];o(w)?(l+=w.count||0,!p&&w.hasWidgets&&(p=!0),!h&&w.hasThunks&&(h=!0),y||!w.hooks&&!w.descendantHooks||(y=!0)):!p&&i(w)?"function"==typeof w.destroy&&(p=!0):!h&&s(w)&&(h=!0)}this.count=d+l,this.hasWidgets=p,this.hasThunks=h,this.hooks=f,this.descendantHooks=y}v.prototype.version=r,v.prototype.type="VirtualNode"},{"./is-thunk":25,"./is-vhook":26,"./is-vnode":27,"./is-widget":29,"./version":30}],32:[function(e,n,t){var r=e("./version");function o(e,n,t){this.type=Number(e),this.vNode=n,this.patch=t}o.NONE=0,o.VTEXT=1,o.VNODE=2,o.WIDGET=3,o.PROPS=4,o.ORDER=5,o.INSERT=6,o.REMOVE=7,o.THUNK=8,n.exports=o,o.prototype.version=r,o.prototype.type="VirtualPatch"},{"./version":30}],33:[function(e,n,t){var r=e("./version");function o(e){this.text=String(e)}n.exports=o,o.prototype.version=r,o.prototype.type="VirtualText"},{"./version":30}],34:[function(e,n,t){var r=e("is-object"),o=e("../vnode/is-vhook");function i(e){return Object.getPrototypeOf?Object.getPrototypeOf(e):e.__proto__?e.__proto__:e.constructor?e.constructor.prototype:void 0}n.exports=function e(n,t){var s;for(var u in n){u in t||((s=s||{})[u]=void 0);var a=n[u],c=t[u];if(a!==c)if(r(a)&&r(c))if(i(c)!==i(a))(s=s||{})[u]=c;else if(o(c))(s=s||{})[u]=c;else{var v=e(a,c);v&&((s=s||{})[u]=v)}else(s=s||{})[u]=c}for(var f in t)f in n||((s=s||{})[f]=t[f]);return s}},{"../vnode/is-vhook":26,"is-object":11}],35:[function(e,n,t){var r=e("x-is-array"),o=e("../vnode/vpatch"),i=e("../vnode/is-vnode"),s=e("../vnode/is-vtext"),u=e("../vnode/is-widget"),a=e("../vnode/is-thunk"),c=e("../vnode/handle-thunk"),v=e("./diff-props");function f(e,n){var t={a:e};return d(e,n,t,0),t}function d(e,n,t,r){if(e!==n){var c=t[r],f=!1;if(a(e)||a(n))p(e,n,t,r);else if(null==n)u(e)||(l(e,t,r),c=t[r]),c=g(c,new o(o.REMOVE,e,n));else if(i(n))if(i(e))if(e.tagName===n.tagName&&e.namespace===n.namespace&&e.key===n.key){var x=v(e.properties,n.properties);x&&(c=g(c,new o(o.PROPS,e,x))),c=function(e,n,t,r,s){for(var u=e.children,a=function(e,n){var t=y(n),r=t.keys,o=t.free;if(o.length===n.length)return{children:n,moves:null};var i=y(e),s=i.keys;if(i.free.length===e.length)return{children:n,moves:null};for(var u=[],a=0,c=o.length,v=0,f=0;f<e.length;f++){var d,l=e[f];l.key?r.hasOwnProperty(l.key)?(d=r[l.key],u.push(n[d])):(d=f-v++,u.push(null)):a<c?(d=o[a++],u.push(n[d])):(d=f-v++,u.push(null))}for(var p=a>=o.length?n.length:o[a],g=0;g<n.length;g++){var x=n[g];x.key?s.hasOwnProperty(x.key)||u.push(x):g>=p&&u.push(x)}for(var k,w=u.slice(),m=0,j=[],b=[],O=0;O<n.length;){var N=n[O];for(k=w[m];null===k&&w.length;)j.push(h(w,m,null)),k=w[m];k&&k.key===N.key?(m++,O++):N.key?(k&&k.key&&r[k.key]!==O+1?(j.push(h(w,m,k.key)),(k=w[m])&&k.key===N.key?m++:b.push({key:N.key,to:O})):b.push({key:N.key,to:O}),O++):k&&k.key&&j.push(h(w,m,k.key))}for(;m<w.length;)k=w[m],j.push(h(w,m,k&&k.key));return j.length!==v||b.length?{children:u,moves:{removes:j,inserts:b}}:{children:u,moves:null}}(u,n.children),c=a.children,v=u.length,f=c.length,l=v>f?v:f,p=0;p<l;p++){var x=u[p],k=c[p];s+=1,x?d(x,k,t,s):k&&(r=g(r,new o(o.INSERT,null,k))),i(x)&&x.count&&(s+=x.count)}return a.moves&&(r=g(r,new o(o.ORDER,e,a.moves))),r}(e,n,t,c,r)}else c=g(c,new o(o.VNODE,e,n)),f=!0;else c=g(c,new o(o.VNODE,e,n)),f=!0;else s(n)?s(e)?e.text!==n.text&&(c=g(c,new o(o.VTEXT,e,n))):(c=g(c,new o(o.VTEXT,e,n)),f=!0):u(n)&&(u(e)||(f=!0),c=g(c,new o(o.WIDGET,e,n)));c&&(t[r]=c),f&&l(e,t,r)}}function l(e,n,t){!function e(n,t,r){if(i(n)){if(n.hooks&&(t[r]=g(t[r],new o(o.PROPS,n,function(e){var n={};for(var t in e)n[t]=void 0;return n}(n.hooks)))),n.descendantHooks||n.hasThunks)for(var s=n.children,u=s.length,c=0;c<u;c++){var v=s[c];e(v,t,r+=1),i(v)&&v.count&&(r+=v.count)}}else a(n)&&p(n,null,t,r)}(e,n,t),function e(n,t,r){if(u(n))"function"==typeof n.destroy&&(t[r]=g(t[r],new o(o.REMOVE,n,null)));else if(i(n)&&(n.hasWidgets||n.hasThunks))for(var s=n.children,c=s.length,v=0;v<c;v++){var f=s[v];e(f,t,r+=1),i(f)&&f.count&&(r+=f.count)}else a(n)&&p(n,null,t,r)}(e,n,t)}function p(e,n,t,r){var i=c(e,n),s=f(i.a,i.b);(function(e){for(var n in e)if("a"!==n)return!0;return!1})(s)&&(t[r]=new o(o.THUNK,null,s))}function h(e,n,t){return e.splice(n,1),{from:n,key:t}}function y(e){for(var n={},t=[],r=e.length,o=0;o<r;o++){var i=e[o];i.key?n[i.key]=o:t.push(o)}return{keys:n,free:t}}function g(e,n){return e?(r(e)?e.push(n):e=[e,n],e):n}n.exports=f},{"../vnode/handle-thunk":24,"../vnode/is-thunk":25,"../vnode/is-vnode":27,"../vnode/is-vtext":28,"../vnode/is-widget":29,"../vnode/vpatch":32,"./diff-props":34,"x-is-array":12}]},{},[4])(4)}).call(this,t(2))},function(e,n,t){var r=t(0).VNode,o=t(0).create,i=function(){};i.prototype.hook=function(e,n,t){console.log("Hello from "+e.id+"!\nMy key was: "+n)};var s={attributes:{class:"red box",style:"width: 100px; height: 100px; background-color: #FF0000;"},id:"my-red-box","a hook can have any property key":new i},u=new r("div",{id:"red-box-child"});RedBoxNode=new r("div",s,[u],"my-unique-red-box","http://www.w3.org/1999/xhtml"),console.log(r),RedBoxElem=o(RedBoxNode),document.body.appendChild(RedBoxElem)},function(e,n){var t;t=function(){return this}();try{t=t||new Function("return this")()}catch(e){"object"==typeof window&&(t=window)}e.exports=t}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,